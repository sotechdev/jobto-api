// <auto-generated />
using System;
using JobTo.Commom.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JobTo.API.Migrations
{
    [DbContext(typeof(JobToDbContext))]
    partial class JobToDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Portuguese_Brazil.1252")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.HasSequence("grid_seq");

            modelBuilder.Entity("JobTo.Commom.Models.Person", b =>
                {
                    b.Property<long?>("Grid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('grid_seq'::regclass)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AddressNr")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CityCode")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValue('A');

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasDefaultValue("C")
                        .HasComment("Person types:\n\n - 'C' : Client\n - 'E' : Employee\n - 'P' : Provider\n - 'B' : Business");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Zipcode")
                        .HasColumnType("text");

                    b.HasKey("Grid");

                    b.ToTable("People");
                });

            modelBuilder.Entity("JobTo.Commom.Models.PersonGroup", b =>
                {
                    b.Property<long?>("Grid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('grid_seq'::regclass)");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("PersonType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValue('C');

                    b.HasKey("Grid");

                    b.ToTable("PersonGroups");
                });

            modelBuilder.Entity("JobTo.Commom.Models.Product", b =>
                {
                    b.Property<long?>("Grid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('grid_seq'::regclass)");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<char?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValue('A')
                        .HasComment("Flag values:\n\n - 'A' : Active\n - 'I' : Inactive\n - 'B' : Blocked\n - 'D' : Deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("NegativeStock")
                        .HasColumnType("boolean");

                    b.Property<char?>("ProductType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValue('P')
                        .HasComment("Product types:\n\n - 'P' : Product\n - 'S' : Service");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("money");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("money");

                    b.Property<string>("Uom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UN")
                        .HasComment("UOM - Units of Measurement");

                    b.HasKey("Grid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("JobTo.Commom.Models.Quote", b =>
                {
                    b.Property<long?>("Grid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('grid_seq'::regclass)");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("Grid");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("JobTo.Commom.Models.QuoteProduct", b =>
                {
                    b.Property<long?>("Grid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('grid_seq'::regclass)");

                    b.Property<string>("Obs")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Qty")
                        .HasColumnType("double precision");

                    b.Property<long?>("QuoteId")
                        .HasColumnType("bigint");

                    b.HasKey("Grid");

                    b.HasIndex("ProductId");

                    b.ToTable("QuoteProducts");
                });

            modelBuilder.Entity("JobTo.Commom.Models.Quote", b =>
                {
                    b.HasOne("JobTo.Commom.Models.Person", "Client")
                        .WithMany("QuoteClients")
                        .HasForeignKey("ClientId");

                    b.HasOne("JobTo.Commom.Models.Person", "Employee")
                        .WithMany("QuoteEmployees")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("JobTo.Commom.Models.QuoteProduct", b =>
                {
                    b.HasOne("JobTo.Commom.Models.Product", "Product")
                        .WithMany("QuoteProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JobTo.Commom.Models.Person", b =>
                {
                    b.Navigation("QuoteClients");

                    b.Navigation("QuoteEmployees");
                });

            modelBuilder.Entity("JobTo.Commom.Models.Product", b =>
                {
                    b.Navigation("QuoteProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
